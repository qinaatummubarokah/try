openapi: 3.0.0
servers:
  - url: //petstore.swagger.io/v2
    description: Default server
  - url: //petstore.swagger.io/sandbox
    description: Sandbox server
info:
  description: |
    This is a sample server Petstore server.
    You can find out more about Swagger at
    [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
    For this sample, you can use the api key `special-key` to test the authorization filters.

    # Introduction
    This documentation is intended to be used as manual to use for SPIN API Payment.
    In this document will explain in details how to use the API with SPIN and what are the best practices.

    # URL For API Call
    There are only 3 available API’s that can be used with spin merchants. The API’s are used to either to
    begin the transaction flow by obtaining the token, kick off a new payment by passing the payment
    parameters or to check the status of an existing payment. 

    Get the token used based on the user’s api-key and api-secret:
      - PROD - https://open-api-web.spinpay.id/v1/api/payment/get-token
      - DEV - https://dev-open-api-web-1.spinpay.id/v1/api/payment/get-token
    
    Begin the payment process flow:
      - PROD - https://open-api-web.spinpay.id/v1/api/payment/do-payment
      - DEV - https://dev-open-api-web-1.spinpay.id/v1/api/payment/do-payment
    
    Will check the payment status of a given payment provided the payment session id:
      - PROD - https://open-api-web.spinpay.id/v1/api/payment/check-payment
      - DEV - https://dev-open-api-web-1.spinpay.id/v1/api/payment/check-payment
    
    Will reverse the payment provided the payment session id:
      - PROD - https://open-api-web.spinpay.id/v1/api/payment/reverse-payment
      - DEV - https://dev-open-api-web-1.spinpay.id/v1/api/payment/reverse-payment

    # Authentication
    The API need to be authenticated using api-key and api-secret. You can get the key and secret from SPIN Integration Team.
    There will be 2 key and secret, 1 will be use in development and 1 will be use in production. 

    Example Development Key and Secret
      - dev_my_store_key
      - dev_secret_abcdefghjiklmnopqrstuvwxyz
    
    Example Production Key
      - my_store_key
      - secret_abcdefghjiklmnopqrstuvwxyz
    
    Please keep your key and secret at some place safe and encrypt it, so no one can access the key easily and see clearly. 
    The key will be the credential to use SPIN services. Any unauthorized use of the key will be not our responsibility.

    <SecurityDefinitions />

  version: 1.0.0
  title: Swagger Petstore
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: API Support
    email: apiteam@swagger.io
    url: https://github.com/Redocly/redoc
  x-logo:
    url: 'https://i1.wp.com/goodmoney.id/wp-content/uploads/2019/10/spin.jpeg?fit=586%2C381&ssl=1'
    altText: Spin logo
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
tags:
  - name: Web Payment
    description: Web Payment SPIN API
  - name: Web Payment SPIN
    description: Access to Petstore orders
  - name: user
    description: Operations about user
  - name: pet_model
    x-displayName: The Pet Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Pet" />
  - name: store_model
    x-displayName: The Order Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Order" exampleRef="#/components/examples/Order" showReadOnly={true} showWriteOnly={true} />
x-tagGroups:
  - name: General
    tags:
      - pet
      - Web Payment SPIN
  - name: User Management
    tags:
      - user
  - name: Models
    tags:
      - pet_model
      - store_model
paths:
  /v1/api/payment/get-token:
    post:
      tags:
        - Web Payment SPIN
      summary: Get token to process payment
      requestBody:
        description : Before you process a web payment, you have to get a token first from SPIN using HTTP POST. The body in JSON and the response will be in JSON.
        required: true
        content: 
            application/json:
                schema:
                    $ref: '#/components/schemas/RequestToken'
      produces: application/json
      responses:
        '200':
          description: OK
          content:
            success/json:
              schema:
                $ref: '#/components/schemas/ResponsToken'
            failed/json:
              schema:
                $ref: '#/components/schemas/ResponsTokenFailed'
        '500':
          description: Internal Server Error
  /v1/api/payment/do-payment:
    post:
      tags:
        - Web Payment SPIN
      summary: Process payment
      parameters: 
        - name: auth-key
          in: header
          required: true
          description: api-key value
          type: string
          example: dev_my_store_key
        - name: auth-token
          in: header
          required: true
          description: sha256(“||%%||” + api-key +“||%%||” amount + wallet_id + mid + invoice_code + merchant_callback “||%%||” +api_gen_token +“||%%||”)
          type: string
          example: auth_token_abcdefghjiklmnopqrstuvwxyz1234567890
      requestBody:
        description : process data to get the Payment URL
        required: true
        content: 
            application/json:
                schema:
                    $ref: '#/components/schemas/RequestDoPayment'
      produces: application/json
      responses:
        '200':
          description: OK
          content:
            success/json:
              schema:
                $ref: '#/components/schemas/ResponsDoPayment'
            success/html:
              schema:
                type: string
              examples:
                response:
                  value:  <html><script>window.location.replace("https://dev-open-api-web-1.spinpay.id/console/view-payment-option?pay_session_trx=TRX_15868008551055_4857808_2225864_9021745&one_time_token=91b1d82cf11d6134171db82e6ec67e2a813debd0a8de71cb685d2ebda669e31f");</script></html>
        '500':
          description: Internal Server Error
  /v1/api/payment/check-payment?invoice_code={invoice_code}:
    get:
      tags:
        - Web Payment SPIN
      summary: Check payment
      parameters: 
        - name: auth-key
          in: header
          required: true
          description: api-key value
          type: string
        - name: auth-token
          in: header
          required: true
          description: sha256(“||%%||” + api-key +“||%%||” + invoice_code + “||%%||” +api_gen_token +“||%%||”).hexdigest()
          type: string
        - name: invoice_code
          in: path
          required: true
          description: invoice code transaction
          type: string
      produces: application/json
      responses:
        '200':
          description: OK
          content:
            success/json:
              schema:
                $ref: '#/components/schemas/ResponsCheckPayment'
            failed/json:
              schema:
                type: string
        '500':
          description: Internal Server Error
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: ''
      operationId: updatePet
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      x-code-samples:
        - lang: PHP
          source: |
            $form = new \PetStore\Entities\Pet();
            $form->setPetId(1);
            $form->setPetType("Dog");
            $form->setName("Rex");
            // set other fields
            try {
                $pet = $client->pets()->update($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
      requestBody:
        $ref: '#/components/requestBodies/Pet'
  '/v1/api/payment/do-paymentcxcxc':
    get:
      tags:
        - Web Payment SPIN
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          deprecated: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ''
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
          example: Bearer <TOKEN>
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          schema:
            type: array
            minItems: 1
            maxItems: 3
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      deprecated: true
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /store/inventory:
    get:
      tags:
        - store
      summary: Get Token
      description: Before you process a web payment, you have to get a token first from SPIN using HTTP POST. The body in JSON and the response will be in JSON.
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: ''
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
          content:
            application/json:
              example:
                status: 400
                message: "Invalid Order"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: OK
            application/xml:
              schema:
                type: string
              examples:
                response:
                  value:  <Message> OK </Message>
            text/plain:
              examples:
                response:
                  value:  OK
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      responses:
        default:
          description: successful operation
components:
  schemas:
    RequestToken:
      type: object
      properties:
        api_key:
          description: API Key (You can get the key and secret from SPIN Integration Team)
          type: string
          format: string
          example: dev_my_store_key
        api_secret:
          description: API Secret (You can get the key and secret from SPIN Integration Team)
          type: string
          format: string
          example: dev_secret_abcdefghjiklmnopqrstuvwxyz
    ResponsToken :
      type: object
      properties: 
        id:
          description: API_CALL
          type: string
          example: API_CALL_1586490272104432_5773512
        status_code:
          description: Will return the status based on code
          type: string
          example: 0000
        status :
          description: Will return the status as text SUCCESS
          type: string
          example: GET_API_GEN_TOKEN_SUCCESS
        desc:
          description: Will return a description of the status
          type: string
          example: GET_API_GEN_TOKEN_SUCCESS
        data:
          description: Will return url to process payment
          allOf: 
            - $ref: '#/components/schemas/Apigentoken'
            - type: object
    Apigentoken :
      type: object
      properties :
        api_gen_token:
          description: api_gen_token
          type: string
          example: 935e4e1b7cdc0657fce323e4865966031ceaef8169a695dc70b728a11e9e9f73
    ResponsTokenFailed :
      type: object
      properties:
        id:
          description: API_CALL
          type: string
          example: API_CALL_1234567890
        status_code:
          description: Will return the status based on code
          type: string
          example: 9999
        status:
          description: Will return the status as text FAILED
          type: string
          example: GET_API_KEY_FAILED
        desc:
          description: Will return a description of the status
          type: string
          example: ERROR CREATING KEY
        data:
          description: Will return url to process payment
          allOf:
            - $ref: '#/components/schemas/Apigentokenfailed'
            - type: object
    Apigentokenfailed :
      type: object
    RequestDoPayment : 
      type: object
      properties:
        amount:
          type: integer
          format: string
          description: Transaction Amount
          example: 20000
        wallet_id:
          type: string
          format: string
          description: SPIN Wallet ID
          example: 08121111111
        mid:
          type: string
          format: string
          description: SPIN Store Merchant ID
          example: dev_my_store_mid
        invoice_code:
          type: string
          format: string
          description: Mechant Invoice Unique ID
          example: MY_STORE_INVOICE
        content_type:
          type: string
          format: string
          required: false
          description: return JSON/HTML
          example: JSON
          enum:
            - JSON
            - HTML
        merchant_callback:
          type: string
          format: url
          description: Merchant Callback URL
          example: https://my.store.url
    ResponsDoPayment : 
      type: object
      properties: 
        id:
          description: API_CALL
          type: string
          example: API_CALL_1586490272104432_5773512
        status_code:
          description: Will return the status based on code
          type: string
          example: 0000
        status:
          description: Will return the status as text SUCCESS
          type: string
          example: DO_PAYMENT_SUCCESS
        desc:
          description: Will return a description of the status
          type: string
          example: DO_PAYMENT_SUCCESS
        data:
          description: Will return url to process payment
          allOf:
            - $ref: '#/components/schemas/Urldopayment'
            - type: object
    Urldopayment :
      type: object
      properties:
        url:
          description: url
          type: string
          example: https://dev-open-api-web-1.spinpay.id/console/view-payment-option?pay_session_trx=TRX_1586490272104432_6579559_780595_8077598&one_time_token=7470fdc9b918c06cf1d6590e20ae39be09f71e9326fafdea6fa23913e6d6418b
    ResponsCheckPayment :
      type: object
      properties: 
        id:
          description: API_CALL
          type: string
          example: API_CALL_1234567890
        status_code:
          description: Will return the status based on code
          type: string
          example: 0000
        status:
          description: Will return the status as text FAILED
          type: string
          example: CHECK_PAYMENT_SUCCESS
        desc:
          description: Will return a description of the status
          type: string
          example: CHECK PAYMENT SUCCESS
        data:
          description: Will return url to process payment
          allOf:
            - $ref: '#/components/schemas/DataCheckPayment'
            - type: object
    DataCheckPayment :
      type: object
      properties: 
        wallet_id:
          description: SPIN Wallet ID
          type: integer
          example: 085748177755
        merchant_id:
          description: SPIN Store Merchant ID
          type: string
          example: 131431020311
        amount:
          description: Transaction Amount
          type: string
          example: 200000
        invoice_code:
          description: Mechant Invoice Unique ID
          type: string
          example: ivd105119111
        status_payment:
          description: number already registered
          type: string
          example: COMPLETED
        trx_id:
          description: The value returned from the transaction
          type: string
          example: 1586778128-11678
        pay_session_trx:
          description: the unique session of the transaction
          type: string
          example: TRX_158670906323313_2097471_628892_9888700
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Cat:
      description: A representation of a cat
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            huntingSkill:
              type: string
              description: The measured skill for hunting
              default: lazy
              example: adventurous
              enum:
                - clueless
                - lazy
                - adventurous
                - aggressive
          required:
            - huntingSkill
    Category:
      type: object
      properties:
        id:
          description: Category ID
          allOf:
            - $ref: '#/components/schemas/Id'
            - type: object
        name:
          description: Category name
          type: string
          minLength: 1
        sub:
          description: Test Sub Category
          type: object
          properties:
            prop1:
              type: string
              description: Dumb Property
      xml:
        name: Category
    Dog:
      description: A representation of a dog
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            packSize:
              type: integer
              format: int32
              description: The size of the pack the dog is from
              default: 1
              minimum: 1
          required:
            - packSize
    HoneyBee:
      description: A representation of a honey bee
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            honeyPerDay:
              type: number
              description: Average amount of honey produced per day in ounces
              example: 3.14
              multipleOf: .01
          required:
            - honeyPerDay
    Id:
      type: integer
      format: int64
      readOnly: true
    Order:
      type: object
      properties:
        id:
          description: Order ID
          allOf:
            - $ref: '#/components/schemas/Id'
        petId:
          description: Pet ID
          allOf:
            - $ref: '#/components/schemas/Id'
        quantity:
          type: integer
          format: int32
          minimum: 1
          default: 1
        shipDate:
          description: Estimated ship date
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          description: Indicates whenever order was completed or not
          type: boolean
          default: false
          readOnly: true
        requestId:
          description: Unique Request Id
          type: string
          writeOnly: true
      xml:
        name: Order
    Pet:
      type: object
      required:
        - name
        - photoUrls
      discriminator:
        propertyName: petType
        mapping:
          cat: '#/components/schemas/Cat'
          dog: '#/components/schemas/Dog'
          bee: '#/components/schemas/HoneyBee'
      properties:
        id:
          externalDocs:
            description: Find more info here
            url: https://example.com
          description: Pet ID
        name:
          description: The name given to a pet
          type: string
          example: Guru
        photoUrls:
          description: The list of URL to a cute photos featuring pet
          type: array
          maxItems: 20
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            format: url
        friend:
          allOf:
            - $ref: '#/components/schemas/Pet'
        tags:
          description: Tags attached to the pet
          type: array
          minItems: 1
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: Pet status in the store
          enum:
            - available
            - pending
            - sold
        petType:
          description: Type of a pet
          type: string
      xml:
        name: Pet
    Tag:
      type: object
      properties:
        id:
          description: Tag ID
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: Tag name
          type: string
          minLength: 1
      xml:
        name: Tag
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        pet:
          oneOf:
            - $ref: '#/components/schemas/Pet'
            - $ref: '#/components/schemas/Tag'
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          description: User email address
          type: string
          format: email
          example: john.smith@example.com
        password:
          type: string
          description: >-
            User password, MUST contain a mix of upper and lower case letters,
            as well as digits
          format: password
          minLength: 8
          pattern: '/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/'
          example: drowssaP123
        phone:
          description: User phone number in international format
          type: string
          pattern: '/^\+(?:[0-9]-?){6,14}[0-9]$/'
          example: +1-202-555-0192
        userStatus:
          description: User status
          type: integer
          format: int32
      xml:
        name: User
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            allOf:
              - description: My Pet
                title: Pettie
              - $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            type: 'object'
            properties:
              name:
                type: string
                description: hooray
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      description: |
        Get access to data while protecting your account credentials.
        OAuth2 is also a safer and more secure way to give you access.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      description: >
        For this sample, you can use the api key `special-key` to test the
        authorization filters.
      type: apiKey
      name: api_key
      in: header
  examples:
    Order:
      value:
        quantity: 1,
        shipDate: 2018-10-19T16:46:45Z,
        status: placed,
        complete: false